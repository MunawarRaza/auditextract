name: Deployment on AWS
on:
  push:
    branches:
      - stage
      - quality
      - main
jobs:
  get-environment:
    name: Get environment
    outputs:
      my_env: ${{ steps.setenv.outputs.my_env }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout github code
      id: checkout-id
      uses: actions/checkout@v4
    - name: Set environment
      id: setenv
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
          echo "my_env=stage" >> $GITHUB_OUTPUT          
        elif [[ "${{ github.ref }}" == "refs/heads/quality" ]]; then
          echo "my_env=quality" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "my_env=main" >> $GITHUB_OUTPUT
        fi
        
  # Audit Extract
  # =======================================================
  audit-extract:
    # if: contains(github.event.head_commit.message, 'deploy audit extract')
    name: Deploying Audit Extract
    runs-on: ubuntu-latest
    needs: get-environment
    environment: 
      name: ${{ needs.get-environment.outputs.my_env }}
    permissions:
      contents: write
    steps:    
      - name: Checkout github code
        id: checkout-id
        uses: actions/checkout@v4
      - name: Test Variables
        run: |
          echo "${{ vars.ENVIRONMENT }}"
          echo "${{ vars.AWS_DEFAULT_REGION }}"
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Get branch name
        id: branch
        shell: bash
        run: echo "name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      - name: Echo branch name
        run: |
          echo ${{ steps.branch.outputs.name }}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Pushing image
        id: build-image-audit-extract
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ENVIRONMENT }}_audit_extract_cactus
          IMAGE_TAG: ${{ steps.branch.outputs.name }}
        run: |
          docker build -f docker/local/audit_extract/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image-audit-extract=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: ai audit create new task definition
        id: task-def-audit-extract
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
        with: 
          task-definition: .github/workflows/${{ vars.ENVIRONMENT }}_audit_extract_ecs_task.json
          container-name: ${{ vars.ENVIRONMENT }}_audit_extract_ecs_container
          image: 590183784162.dkr.ecr.us-east-1.amazonaws.com/${{ vars.ENVIRONMENT }}_audit_extract_cactus:${{ steps.branch.outputs.name }}
          environment-variables: |
            ENVIRONMENT=${{ vars.ENVIRONMENT }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION=${{ vars.AWS_DEFAULT_REGION }}
      - name: Cat rendered task
        run: |
          cat ${{ steps.task-def-audit-extract.outputs.task-definition }}
      - name: Deploying to ecs
        id: deploy-audit-extract
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
        with:
          task-definition: ${{ steps.task-def-audit-extract.outputs.task-definition }}
          service: ${{ vars.ENVIRONMENT }}_audit_extract_ecs_service
          cluster: ${{ vars.ENVIRONMENT }}_audit_extract_ecs_cluster
          wait-for-service-stability: false
